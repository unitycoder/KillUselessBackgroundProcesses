<Window 
		x:Class="KillUselessBackgroundProcesses.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:KillUselessBackgroundProcesses"
		xmlns:System="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="KillUselessBackgroundProcesses" Height="583.333" Width="825.316" WindowStartupLocation="CenterScreen" Background="{DynamicResource DarkestBackground}" MinWidth="600" MinHeight="650" AllowsTransparency="True" WindowStyle="None" Margin="0">

	<Window.Resources>
		<!-- datagrid header -->
		<Style x:Key="HeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="Background" Value="{StaticResource DatagridHeaderBackground}" />
			<Setter Property="Foreground" Value="{StaticResource DatagridHeaderForeground}" />
			<Setter Property="BorderBrush" Value="{StaticResource DatagridHeaderBorder}" />
			<Setter Property="BorderThickness" Value="0,0,1,1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Left" />
			<Setter Property="Height" Value="28" />
			<Setter Property="Padding" Value="6,2,2,2" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!-- datagrid rows & row selection -->
		<Style TargetType="{x:Type DataGridRow}">
			<Setter Property="Background" Value="{StaticResource ButtonBackground}" />
			<Setter Property="BorderBrush" Value="{x:Null}" />
			<Setter Property="BorderThickness" Value="0,0,0,0" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{StaticResource DataGridRowMouseOver}"/>
				</Trigger>
				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="{StaticResource DataGridRowSelectedBackground}" />
				</Trigger>
			</Style.Triggers>
			<Style.Resources>
				<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
			</Style.Resources>
		</Style>

		<!-- datagrid hide selected cell borders -->
		<Style TargetType="{x:Type DataGridCell}">
			<Setter Property="BorderBrush" Value="Transparent" />
			<Setter Property="FocusVisualStyle" Value="{x:Null}" />
			<Setter Property="Margin" Value="0,0.5,0,0.5" />
			<Style.Triggers>
				<Trigger Property="IsSelected" Value="True">
					<Setter Property="Background" Value="Transparent" />
				</Trigger>
				<Trigger Property="IsSelected" Value="False">
					<Setter Property="Background" Value="Transparent" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<!-- custom buttons -->
		<Style x:Key="CustomButton" TargetType="{x:Type Button}">
			<Setter Property="SnapsToDevicePixels" Value="true"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>
			<Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="shortcutbutton" BorderThickness="0" BorderBrush="Black" Background="{TemplateBinding Background}">
							<ContentPresenter Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="#FF707070" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="shortcutbutton" Property="Background" Value="#FF494949" />
								<Setter Property="TextElement.Foreground" TargetName="shortcutbutton" Value="White"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter TargetName="shortcutbutton" Property="Background" Value="#FF0F0F0F" />
								<Setter Property="TextElement.Foreground" TargetName="shortcutbutton" Value="White"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


		<!-- scrollbar top/bottom arrow buttons -->
		<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<!-- button background -->
						<Border x:Name="Border" Margin="1" CornerRadius="0" BorderThickness="0" Background="{DynamicResource ButtonBackground}" BorderBrush="{x:Null}">
							<!-- arrow sign -->
							<Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource ScrollArrowForeground}" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
						</Border>
						<ControlTemplate.Triggers>
							<!-- NOTE order matters, if pressed is before mouseover, then it gets overwritten -->
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource TextBoxBackground}" />
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource ScrollArrowPressed}" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="Black"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Border Background="Transparent" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- scroll thumb (elevator) bar -->
		<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border x:Name="Border" CornerRadius="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource ScrollBarThumbFill}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
			<Grid >
				<Grid.RowDefinitions>
					<RowDefinition MaxHeight="18"/>
					<RowDefinition Height="0.00001*"/>
					<RowDefinition MaxHeight="18"/>
				</Grid.RowDefinitions>
				<!-- scrollbar background -->
				<Border Grid.RowSpan="3" CornerRadius="0" Background="{DynamicResource ScrollBarBackground}" />
				<!-- scrollbar top button -->
				<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand"  Content="M 0 4 L 8 4 L 4 0 Z" />
				<Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<!-- scrollbar foreground -->
						<Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{DynamicResource ScrollBarFill}" BorderBrush="{x:Null}"/>
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
					</Track.IncreaseRepeatButton>
				</Track>
				<!-- scrollbar bottom button -->
				<RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
			</Grid>
		</ControlTemplate>

		<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="true"/>
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Vertical">
					<Setter Property="Width" Value="18"/>
					<Setter Property="Height" Value="Auto" />
					<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
				</Trigger>
			</Style.Triggers>
		</Style>

	</Window.Resources>

	<Grid Margin="0">
		<Grid.RowDefinitions>
			<RowDefinition Height="27" />
			<RowDefinition Height="*" />
			<RowDefinition Height="40" />
		</Grid.RowDefinitions>

		<!-- menubar -->
		<Grid Grid.Row="0" UseLayoutRounding="False">
			<Rectangle Fill="{DynamicResource DarkMenuBar}" MouseDown="OnRectangleMouseDown" />
			<!--<Image Source="Images/icon.png" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="Left" Width="16" Height="16" Margin="4,0,0,0" SnapsToDevicePixels="True" UseLayoutRounding="True" />-->
			<Label Content="KillUselessBackgroundProcesses" IsHitTestVisible="False" Margin="19,0,0,-5"  Foreground="#FFB8B8B8" FontSize="12" HorizontalAlignment="Left"  />
			<!-- minimize -->
			<Button x:Name="btnMinimize" BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" HorizontalAlignment="Right" VerticalAlignment="Top" Height="26" Width="26" Background="Transparent" Click="BtnMinimize_Click" Margin="0,0,27,0" Padding="2,0,2,8" IsTabStop="False">
				<TextBlock Text="–" FontSize="15" Foreground="#FFC3C3C3" Padding="0" Height="23" HorizontalAlignment="Center"/>
			</Button>
			<!-- close -->
			<Button x:Name="btnClose" BorderThickness="0" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" HorizontalAlignment="Right" VerticalAlignment="Top" Height="26" Width="26" Background="Transparent" Click="BtnClose_Click" Padding="0,2" IsTabStop="False">
				<TextBlock Text="❌" FontSize="10" Foreground="#FFC3C3C3" Padding="5,3,4,4" HorizontalAlignment="Center" />
			</Button>
		</Grid>



		<DataGrid Grid.Row="1" x:Name="gridProcess" HorizontalAlignment="Left" Height="582" Margin="10,10,0,0" VerticalAlignment="Top" Width="805" SelectionMode="Single" CanUserAddRows="False" Background="{x:Null}" BorderBrush="{x:Null}" ColumnHeaderStyle="{StaticResource HeaderStyle}" Padding="0" HorizontalScrollBarVisibility="Disabled" HeadersVisibility="Column" Foreground="#FFD8D8D8" HorizontalGridLinesBrush="#4C000000" VerticalGridLinesBrush="#19000000" AutoGenerateColumns="False" >
			<DataGrid.Columns>
				<DataGridTextColumn Binding="{Binding Name}" ClipboardContentBinding="{x:Null}" Header="Name" IsReadOnly="True" Width="250"/>
				<DataGridTextColumn Binding="{Binding FileName}" ClipboardContentBinding="{x:Null}" Header="File" IsReadOnly="True" Width="250"/>
			</DataGrid.Columns>
		</DataGrid>


		<Grid Grid.Row="2" VerticalAlignment="Bottom" Margin="4,0,8,5">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="40" />
			</Grid.RowDefinitions>

			<Button Grid.Column="0" x:Name="btnKill" Content="Kill" HorizontalAlignment="Left"  VerticalAlignment="Top" Width="140" Height="47" IsEnabled="False"/>
			<Button Grid.Column="1" x:Name="btnScan" Content="Scan" HorizontalAlignment="Left" VerticalAlignment="Top" Width="140" Height="47" Click="BtnScan_Click"/>
		</Grid>

	</Grid>
</Window>
